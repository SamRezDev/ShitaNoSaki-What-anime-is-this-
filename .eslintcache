[{"D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\index.js":"1","D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\App.js":"2","D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\components\\RequestContainer.js":"3","D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\components\\QuerryAnswer.js":"4","D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\components\\NavBar.js":"5","D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\container\\About.js":"6","D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\firebase\\firebase.js":"7"},{"size":261,"mtime":1610824700187,"results":"8","hashOfConfig":"9"},{"size":818,"mtime":1610834952213,"results":"10","hashOfConfig":"9"},{"size":4740,"mtime":1627488060818,"results":"11","hashOfConfig":"9"},{"size":1605,"mtime":1627488848543,"results":"12","hashOfConfig":"9"},{"size":552,"mtime":1610834903336,"results":"13","hashOfConfig":"9"},{"size":1433,"mtime":1610834896198,"results":"14","hashOfConfig":"9"},{"size":571,"mtime":1627489506971,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"cprr4w",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\index.js",[],["33","34"],"D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\App.js",[],"D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\components\\RequestContainer.js",["35","36","37"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./RequestContainer.css\";\r\nimport QuerryAnswer from \"./QuerryAnswer\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { storage } from \"../firebase/firebase\";\r\n\r\nexport default function RequestContainer() {\r\n  const [selectedFile, setselectedFile] = useState();\r\n  const [selectedFileURL, setselectedFileURL] = useState();\r\n  const [Response, setResponse] = useState([]);\r\n  const [Loaded, setLoaded] = useState(false);\r\n  const [NoImageState, setNoImageState] = useState(false);\r\n  const [FetchingStatus, setFetchingStatus] = useState(false);\r\n  const [FireBaseLink, setFireBaseLink] = useState(\"\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [FireBaseUpload, setFireBaseUpload] = useState(\"\")\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    setselectedFileURL (setselectedFileURL);\r\n    setselectedFile(selectedFile);\r\n    console.log(selectedFile);\r\n  }, [QuerryAnswer,selectedFile,setselectedFileURL,FireBaseUpload,FetchingStatus]);\r\n\r\n\r\n  async function handleUpload ()  {\r\n    const uploadTask = storage.ref(`images/${selectedFile.name}`).put(selectedFile);\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      snapshot => {\r\n        const progress = Math.round(\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n        );\r\n        setProgress(progress);\r\n        console.log(progress)\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      },\r\n      () => {\r\n        storage\r\n          .ref(\"images\")\r\n          .child(selectedFile.name)\r\n          .getDownloadURL()\r\n          .then(url => {\r\n            console.log(\"THIS LINK IS FROM  HANDLE UPLOAD PRE SET FUNCTION\"+ url)\r\n            setFireBaseUpload(url)\r\n            console.log(\"THIS LINK IS FROM  HANDLE UPLOAD POST SET FUNCTION\"+ FireBaseUpload)\r\n            CheckImage(url)\r\n          });\r\n      }\r\n    );\r\n  };\r\n\r\n\r\nfunction CheckImage(ActualUrl) {\r\n    setFetchingStatus(true);\r\n    if (selectedFile) {\r\n      const formData = new FormData();\r\n      formData.append(\"image\", selectedFile);\r\n\r\n      var img = new Image();\r\n      img.src = selectedFileURL;\r\n\r\n      var canvas = document.createElement(\"canvas\");\r\n      canvas.width = img.naturalWidth;\r\n      canvas.height = img.naturalHeight;\r\n      var ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n      console.log(\"THIS LINK IS FROM CHECK IMAGE FUNCTION\"+ ActualUrl)\r\n      setFireBaseLink(encodeURIComponent(ActualUrl))\r\n      \r\n\r\n      fetch(\r\n        `https://api.trace.moe/search?anilistInfo&url=${FireBaseLink}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((result) => {\r\n          setResponse(result);\r\n          setLoaded(true);\r\n          setFetchingStatus(false);\r\n          console.log(result)\r\n      /*  console.log(\"CacheHit is \"+result.CacheHit);\r\n      console.log(\"DOCS \"+result.docs.map( element => element.anime)) */\r\n        });\r\n\r\n      // console.log(\"Checked image\" +selectedFile,selectedFile.name)\r\n    } else {\r\n      setNoImageState(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"RequestContainer\">\r\n        <div className=\"PreviewImageContainer\">\r\n          {!selectedFileURL ? (\r\n            <Dropzone>\r\n              {({ getRootProps, getInputProps }) => (\r\n                <section className=\"AwaitingImage\">\r\n                  <div {...getRootProps()}>\r\n                    <input {...getInputProps()} onChange={(e) =>{ setselectedFile(e.target.files[0])\r\n              setselectedFileURL(URL.createObjectURL(e.target.files[0]))\r\n            }} />\r\n                    <p> Drop your screenshot here ! </p>\r\n                  </div>\r\n                </section>\r\n              )}\r\n            </Dropzone>\r\n          ) : (\r\n            <img className=\"PreviewImage\" src={selectedFileURL} alt=\"\" />\r\n          )}{\" \"}\r\n        </div>\r\n        <div className=\"InteractionButtons\">\r\n          <input\r\n            type=\"file\"\r\n            name=\"\"\r\n            id=\"img\"\r\n            className=\"InteractionImg\"\r\n            onChange={(e) =>{ setselectedFile(e.target.files[0])\r\n              setselectedFileURL(URL.createObjectURL(e.target.files[0]))\r\n            }}\r\n            accept=\"image/x-png,image/jpeg ,image/jpg\"\r\n          />\r\n          <button onClick={handleUpload} className=\"SubmitButton\">\r\n            {\" \"}\r\n            submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {Loaded ? (\r\n        <QuerryAnswer Status={FetchingStatus} Result={Response} />\r\n      ) : (\r\n        <div className=\"QuerryContainerLoading\">\r\n          Awaiting{\" \"}\r\n          <div className=\"lds-ripple2\">\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\components\\QuerryAnswer.js",["38","39"],"import React, { useState, useEffect } from 'react';\r\nimport './QuerryAnswer.css';\r\nexport default function QuerryAnswer(props) {\r\n\tconst [ Filter, setFilter ] = useState([]);\r\n\tconst [ displayQuerryStyle, setdisplayQuerryStyle ] = useState(false);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tFilterResult();\r\n\t\t},\r\n\t\t[ props.Result.result, displayQuerryStyle, FilterResult ]\r\n\t);\r\n\r\n\tfunction FilterResult() {\r\n\t\tsetdisplayQuerryStyle(false);\r\n\t\tif (props.Result.result === undefined || props.Result.result === null) {\r\n\t\t\tsetdisplayQuerryStyle(false);\r\n\t\t} else {\r\n\t\t\tprops.Result.result.map((element) => {\r\n\t\t\t\tif (Math.max(element.similarity)) {\r\n\t\t\t\t\tif (element.similarity > 0.92) {\r\n\t\t\t\t\t\tsetFilter(element);\r\n\t\t\t\t\t\tsetdisplayQuerryStyle(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tif (props.Status === true) {\r\n\t\treturn (\r\n\t\t\t<div className=\"QuerryContainerLoading\">\r\n\t\t\t\tCURRENTLY SEARCHING{' '}\r\n\t\t\t\t<div className=\"lds-ripple\">\r\n\t\t\t\t\t<div />\r\n\t\t\t\t\t<div />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"QuerryContainer\">\r\n\t\t\t\t{displayQuerryStyle ? (\r\n\t\t\t\t\t<div className=\"AnswerTitle\">\r\n\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\tEpisode NÂ°{Filter.episode} of<br /> <h1>{Filter.anilist.title.english}</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div className=\"AnswerTitleNotEnough\">\r\n\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\tWe could not find a good enough result with your screenshot.\r\n\t\t\t\t\t\t<br /> To achieve <span>better result,</span> make sure your picture :{' '}\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t<li>- Is of good quality </li> <li> - Covers the whole frame</li>{' '}\r\n\t\t\t\t\t\t</ul>{' '}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\components\\NavBar.js",[],"D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\container\\About.js",[],"D:\\THE FUTURE\\Webdev\\Tests and projects\\Practice design\\whereisthisanimefrom\\src\\firebase\\firebase.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":12,"column":10,"nodeType":"46","messageId":"47","endLine":12,"endColumn":22},{"ruleId":"44","severity":1,"message":"48","line":15,"column":10,"nodeType":"46","messageId":"47","endLine":15,"endColumn":18},{"ruleId":"49","severity":1,"message":"50","line":24,"column":6,"nodeType":"51","endLine":24,"endColumn":82,"suggestions":"52"},{"ruleId":"49","severity":1,"message":"53","line":14,"column":2,"nodeType":"54","endLine":28,"endColumn":3},{"ruleId":"55","severity":1,"message":"56","line":19,"column":38,"nodeType":"57","messageId":"58","endLine":19,"endColumn":40},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'NoImageState' is assigned a value but never used.","Identifier","unusedVar","'progress' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'QuerryAnswer'. Either exclude it or remove the dependency array. Outer scope values like 'QuerryAnswer' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["61"],"The 'FilterResult' function makes the dependencies of useEffect Hook (at line 11) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'FilterResult' in its own useCallback() Hook.","FunctionDeclaration","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [selectedFile, setselectedFileURL, FireBaseUpload, FetchingStatus]",{"range":"64","text":"65"},[918,994],"[selectedFile, setselectedFileURL, FireBaseUpload, FetchingStatus]"]